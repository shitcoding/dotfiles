" General Settings
set configversion 2.0
set theme midnight
set update.lastchecktime 1705396334974

" Binds
bind * tabduplicate
bind --mode=ex <C-c> ex.hide_and_clear
bind --mode=hint <C-c> hint.reset
bind --mode=input <C-c> composite unfocus | mode normal
bind --mode=insert <C-j> !s xdotool key Down
bind --mode=insert <C-k> !s xdotool key Up
bind ;M composite hint -Jpipe img src | tabopen images.google.com/searchbyimage?image_url=
bind ;O hint -W fillcmdline_notrail open
bind ;T hint -W fillcmdline_notrail tabopen
bind ;W hint -W fillcmdline_notrail winopen
bind ;m composite hint -Jpipe img src | open images.google.com/searchbyimage?image_url=
bind <C-в> scrollpage 0.5
bind <C-г> scrollpage -0.5
bind B back
bind H tabfirst
bind I focusinput -I
bind J tabnext
bind K tabprev
bind L tablast
bind M tabmove -1
bind gb tabprev
bind gnM tabopen https://github.com/tridactyl/tridactyl/wiki/Exemplar-.tridactylrc-files
bind goM open https://github.com/tridactyl/tridactyl/wiki/Exemplar-.tridactylrc-files
bind gr reader
bind gwM winopen https://github.com/tridactyl/tridactyl/wiki/Exemplar-.tridactylrc-files
bind m tabmove +1
bind А hint -b
bind Ж fillcmdline_notrail
bind З clipboard tabopen
bind И back
bind Л tabprev
bind О tabnext
bind П scrollto 100
bind Ь tabmove -1
bind а hint
bind в tabclose
bind г undo
bind е fillcmdline tabopen
bind з clipboard open
bind к reload
bind л scrollline -10
bind м hint -h
bind нн clipboard yank
bind о scrollline 10
bind пп scrollto 0
bind пш focusinput -l
bind ь tabmove +1
unbind --mode=insert <C-c>
unbind --mode=visual <C-c>
unbind <C-[>
unbind <C-c>
unbind bkpconf

" Aliases """""""""""""""""""""""""""""""""""""""""""""""
alias bkpconfig mkt! ~/.config/tridactyl/tridactylrc
alias current_url composite get_current_url | fillcmdline_notrail
alias drawingstop no_mouse_mode
"""" Create cleaned up tridactylrc config
" https://github.com/tridactyl/tridactyl/wiki/Commentary-of-Gholk's-Tridactylrc#version-control-about-tridactylrc
alias mktridactylrc_fix js const rc=function parseConfig(){let p={conf:[],binds:[],aliases:[],subconfigs:[],aucmds:[],aucons:[],logging:[],nulls:[]};const binding={map:new Map([["normal","nmaps"],["ignore","ignoremaps"],["insert","imaps"],["input","inputmaps"],["ex","exmaps"],["hint","hintmaps"],["visual","vmaps"],["browser","browsermaps"]]),get modeMaps(){return this},init(){const l=this.excludeMapName=[];const ex=tri.config.get("mktridactylrc_exclude_map_name");if(ex)l.push(...ex.split(" "))},customMapName(map){if(map.slice(-4)!="maps"||this.excludeMapName.includes(map))return null;return map.slice(0,-4)},includes(map){let include=false;this.map.forEach(x=>{if(x==map)include=true});if(include)return include;if(this.customMapName(map))return true;return false},get maps2mode(){return this},get(map){let name;this.map.forEach((m,n)=>{if(m==map)name=n});if(!name)name=this.customMapName(map);if(name)return name}};binding.init();p=parseConfigHelper(tri.config.USERCONFIG,p);let d={conf:[],binds:[],aliases:[],subconfigs:[],aucmds:[],aucons:[],logging:[],nulls:[]};d=parseConfigHelper(tri.config.DEFAULTS,d);const s={general:``,binds:``,aliases:``,aucmds:``,aucons:``,subconfigs:``,logging:``,nulls:``};Object.keys(p).forEach(k=>{const defaultConfig=new Set(d[k]);p[k]=p[k].filter(x=>!defaultConfig.has(x)||/^("|$)/.test(x));p[k].sort();if(k!="binds")return;const bindSet=new Set(p[k]);p[k]=p[k].filter((l,i,list)=>{if(l.slice(0,7)=="bindurl"){const noUrl=l.replace(/^bindurl .*? /,"bind ");if(defaultConfig.has(noUrl))return false;if(~list.indexOf(noUrl))return false}else if(l.slice(0,11)=="bind --mode"){const map=[[/^bind --mode=ex/,"bind --mode=insert"],[/^bind --mode=visual/,"bind"]];const parentCommand=map.reduce((l,[re,parent])=>{if(l.match(re))return l.replace(re,parent);else return l},l);if(parentCommand==l)return true;if(bindSet.has(parentCommand))return false;if(defaultConfig.has(parentCommand))return false}return true})});if(p.conf.length>0)s.general=`" General Settings\n${p.conf.join("\n")}\n\n`;if(p.binds.length>0)s.binds=`" Binds\n${p.binds.join("\n")}\n\n`;if(p.aliases.length>0)s.aliases=`" Aliases\n${p.aliases.join("\n")}\n\n`;if(p.aucmds.length>0)s.aucmds=`" Autocmds\n${p.aucmds.join("\n")}\n\n`;if(p.aucons.length>0)s.aucons=`" Autocontainers\n${p.aucons.join("\n")}\n\n`;if(p.subconfigs.length>0)s.subconfigs=`" Subconfig Settings\n${p.subconfigs.join("\n")}\n\n`;if(p.logging.length>0)s.logging=`" Logging\n${p.logging.join("\n")}\n\n`;if(p.nulls.length>0)s.nulls=`" Removed settings\n${p.nulls.join("\n")}\n\n`;const ftdetect=`" For syntax highlighting see https://github.com/tridactyl/vim-tridactyl\n" vim: set filetype=tridactyl`;return`${s.general}${s.binds}${s.subconfigs}${s.aliases}${s.aucmds}${s.aucons}${s.logging}${s.nulls}${ftdetect}`;function parseConfigHelper(pconf,parseobj,prefix=[]){for(const i of Object.keys(pconf)){if(typeof pconf[i]!=="object"){if(prefix[0]==="subconfigs"){const pattern=prefix[1];const subname=prefix.slice(2);parseobj.subconfigs.push(`seturl ${pattern} ${[...subname,i].join(".")} ${pconf[i]}`)}else{parseobj.conf.push(`set ${[...prefix,i].join(".")} ${pconf[i]}`)}}else if(pconf[i]===null){parseobj.nulls.push(`setnull ${[...prefix,i].join(".")}`)}else{for(const e of Object.keys(pconf[i])){if(binding.modeMaps.includes(i)){let cmd="bind";if(prefix[0]==="subconfigs")cmd=cmd+"url "+prefix[1];if(i!=="nmaps"){const mode=binding.maps2mode.get(i);cmd+=` --mode=${mode}`}if(pconf[i][e]===null){parseobj.binds.push(`un${cmd} ${e}`);continue}if(pconf[i][e].length>0){parseobj.binds.push(`${cmd} ${e} ${pconf[i][e]}`)}else{parseobj.binds.push(`un${cmd} ${e}`)}}else if(pconf[i][e]===null){parseobj.nulls.push(`setnull ${i}.${e}`)}else if(i==="exaliases"){if(e==="alias"){parseobj.aliases.push(`command ${e} ${pconf[i][e]}`)}else{parseobj.aliases.push(`alias ${e} ${pconf[i][e]}`)}}else if(i==="autocmds"){for(const a of Object.keys(pconf[i][e])){parseobj.aucmds.push(`autocmd ${e} ${a} ${pconf[i][e][a]}`)}}else if(i==="autocontain"){parseobj.aucons.push(`autocontain ${e} ${pconf[i][e]}`)}else if(i==="logging"){let level;if(pconf[i][e]===0)level="never";if(pconf[i][e]===1)level="error";if(pconf[i][e]===2)level="warning";if(pconf[i][e]===3)level="info";if(pconf[i][e]===4)level="debug";parseobj.logging.push(`set logging.${e} ${level}`)}else if(i==="customthemes"){}else{parseConfigHelper(pconf[i],parseobj,[...prefix,i]);break}}}}return parseobj}}()+"\n";rc;

" For syntax highlighting see https://github.com/tridactyl/vim-tridactyl
" vim: set filetype=tridactyl
